// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: activity.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "activity_log";

export enum Status {
  Success = 0,
  Failed = 1,
  UNRECOGNIZED = -1,
}

export interface LogActivityRequest {
  location: string;
  time: string;
  date: string;
  os: string;
  action: string;
}

export interface LogActivityResponse {
  status: Status;
  message?: string | undefined;
}

export const ACTIVITY_LOG_PACKAGE_NAME = "activity_log";

export interface ActivityLogClient {
  logActivity(request: LogActivityRequest): Observable<LogActivityResponse>;
}

export interface ActivityLogController {
  logActivity(
    request: LogActivityRequest,
  ): Promise<LogActivityResponse> | Observable<LogActivityResponse> | LogActivityResponse;
}

export function ActivityLogControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["logActivity"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ActivityLog", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ActivityLog", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ACTIVITY_LOG_SERVICE_NAME = "ActivityLog";
