// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: user_profile.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user_profile";

export interface ProfileRequest {
}

export interface ProfileResponse {
  id: string;
  lastName: string;
  firstName: string;
  email: string;
}

export interface ProfileUpdateRequest {
  lastName?: string | undefined;
  firstName?: string | undefined;
  email?: string | undefined;
}

export interface ProfileUpdateResponse {
  id: string;
  lastName: string;
  firstName: string;
  email: string;
}

export const USER_PROFILE_PACKAGE_NAME = "user_profile";

export interface UserProfileClient {
  getProfile(request: ProfileRequest): Observable<ProfileResponse>;

  updateProfile(request: ProfileUpdateRequest): Observable<ProfileUpdateResponse>;
}

export interface UserProfileController {
  getProfile(request: ProfileRequest): Promise<ProfileResponse> | Observable<ProfileResponse> | ProfileResponse;

  updateProfile(
    request: ProfileUpdateRequest,
  ): Promise<ProfileUpdateResponse> | Observable<ProfileUpdateResponse> | ProfileUpdateResponse;
}

export function UserProfileControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProfile", "updateProfile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserProfile", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserProfile", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_PROFILE_SERVICE_NAME = "UserProfile";
